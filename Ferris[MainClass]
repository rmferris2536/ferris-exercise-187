//AUTHOR: ROBERT M FERRIS
//COURSE: CPT 187
//PURPOSE: A program that allows user's to create order's for different hardware items. Users can create a user name and password to use for the program. Users can load a database file to order product. Program will randomly generate a prize for each customer. Program gives an itemized receipt per order and a final order report detailing items requested and a grand total.
//STARTDATE: 02/24/2022

package edu.cpt187.ferris.exercise7;
//IMPORT SCANNER
import java.util.Scanner;
//MAIN CLASS START
public class MainClass 
{
	//CLASS CONSTANTS
	public static final char[] MENU_CHARS = {'A', 'B', 'Q'};
	public static final String[] MENU_OPTIONS = {"Login", "Create an Account", "Quit"};
	public static final char[] FILE_MENU_CHARS = {'A', 'B', 'R'};
	public static final String[] FILE_MENU_OPTIONS = {"Load Inventory", "Create Order", "Return to Main Menu"};
	public static final char[] SUB_MENU_CHARS = {'A', 'B', 'C', 'D'};
	public static final String INVENTORY_FILE_NAME = "MasterOrderFile.dat";
	public static final String ACCOUNTS_FILE_NAME = "MasterUserFile.dat";
	//MAIN METHOD START
	public static void main(String[] args) 
	{
		//CREATE INSTANCE FROM SUPPORTIVE CLASS
		Inventory currentInventory = new Inventory();
		Order currentOrder = new Order();
		WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);
		UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);
		//DECLARE AND INTIALIZE THE SCANNER
		Scanner input = new Scanner(System.in);
		//LOCAL VARIABLES
		String userName = "";
		char menuSelection = ' ';
		//DISPLAY WELCOME BANNER
		displayWelcomeBanner();
		//PRIME READ
		menuSelection = validateMenuSelection(input);
		//RUN WHILE SELECTION NOT Q START
		while (menuSelection != 'Q')
		{
			currentUser.setUserAccountArrays();
			//GET USER NAME
			userName = getUserName(input);
			// MENU SELECTION NOT EQUAL TO A VALIDATION START
			if (menuSelection != 'A')
			{
				currentUser.setSearchedIndex(userName);
				//CREATE/VALIDATE ACCOUNT START
				if (currentUser.getSearchedIndex() >= 0)
				{
					displayAccountResults(userName);
				}//CREATE/VALIDATE ACCOUNT END
				else
				{
					currentUser.setWriteOneRecord(userName, getPassword(input));
					displayAccountResults();
				}
			}//MENU SELECTION NOT EQUAL TO A VALIDATION END
			//MENU SELECTION IS EQUAL TO A VALIDATION START
			else
			{
				currentUser.setSearchedIndex(userName, getPassword(input));
				//ACCOUNT LOG IN VALIDATION START
				if (currentUser.getSearchedIndex() < 0)
				{
					displayLoginError();
				}
				else
				{
					menuSelection = validateFileSelection(input);
					//RUN WHILE MENU SELECTION IS NOT EQUAL TO R START
					while (menuSelection != 'R')
					{
						//MENU SELECTION IS EQUAL TO A START
						if (menuSelection == 'A')
						{
							currentInventory.setLoadItems(getFileName(input));
							//RECORD REPORT VALIDATION START
							if (currentInventory.getRecordCount() <= 0)
							{
								displayFileError();
							}
							else
							{
								displayRecordReport(currentInventory.getRecordCount());
							}//RECORD REPORT VALIDATION END
						}//MENU SELECTION IS EQUAL TO A END
						//VALIDATE SEARCH VALUE START
						else
						{
							currentInventory.setSearchIndex(validateSearchValue(input));
							//PASS VALIDATED VALUES TO SETTERS START
							if (currentInventory.getItemSearchIndex() < 0)
							{
								displayNotFound();
							}
							else
							{
								currentOrder.setLastItemSelectedIndex(currentInventory.getItemSearchIndex());
								currentOrder.setItemID(currentInventory.getItemIDs());
								currentOrder.setItemPrice(currentInventory.getItemPrices());
								currentOrder.setItemName(currentInventory.getItemNames());
								currentOrder.setHowMany(validateHowMany(input));
								//IN STOCK VALIDATION START
								if (currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany())
								{
									displayOutOfStock();
								}
								else
								{
									currentOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));
									currentOrder.setDiscountName(currentInventory.getDiscountNames());
									currentOrder.setDiscountRate(currentInventory.getDiscountRates());
									currentOrder.setDecreaseInStock(currentInventory);
									currentOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());
									orders.setWriteOrder(currentOrder.getItemID(), currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getTotalCost());
									//DISCOUNT RATE VALIDATION FOR ORDER REPORT START
									if (currentOrder.getDiscountRate() > 0.0)
									{
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getDiscountName(), currentOrder.getDiscountRate(), currentOrder.getDiscountAmt(), currentOrder.getDiscountPrice(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}
									else
									{
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//DISCOUNT RATE VALIDATION FOR ORDER REPORT END
								}//IN STOCK VALIDATION END
							}//PASS VALIDATED VALUES TO SETTERS END
						}//VALIDATE SEARCH VALUE END
						menuSelection = validateFileSelection(input);
					}//RUN WHILE MENU SELECTION IS NOT EQUAL TO R END
				}//ACCOUNT LOG IN VALIDATION END
			}//MENU SELECTION IS EQUAL TO A VALIDATION END
			menuSelection = validateMenuSelection(input);
		}//RUN WHILE SELECTION NOT Q END
		currentInventory.setLoadItems(orders.getFileName(), orders.getRecordCount());
		//RECORD COUNT VALIDATION FOR FINAL REPORT START
		if (orders.getRecordCount() > 0)
		{
			displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(), currentInventory.getItemPrices(), currentInventory.getOrderQuantities(), currentInventory.getOrderTotals(), currentInventory.getRecordCount(), currentInventory.getGrandTotal());
		}
		//DISPLAY FAREWELL MESSAGE
		displayFarewellMessage();
		//CLOSE SCANNER
		input.close();
	}//MAIN METHOD END
	//VOIDS
	//WELCOME BANNER START
	public static void displayWelcomeBanner()
	{
		System.out.println("Welcome to Bill's Hardware Store!");
		System.out.println("This program will allow you to create orders for your ");
		System.out.println("hardware and tool needs! Please apply discounts");
		System.out.println("for Club Members and Seniors as needed. Free Prizes!");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~  ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}//WELCOME BANNER END
	//FAREWELL MESSAGE START
	public static void displayFarewellMessage()
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~  ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("Thank you for shopping at Bill's Hardware Store!");
		System.out.println("We Appreciate Your Business & Enjoy your Prize!");
		System.out.println("Do you want to become part of Builder Bill Club?");
		System.out.println("Contact a representative for membership options today!");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~  ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}//FAREWELL MESSAGE END
	//MAIN MENU DISPLAY START
	public static void displayMainMenu()
	{
		int localIndex = 0;
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("MAIN MENU");
		//REPETITION STRUCTURE FOR ARRAY LOOP START
		while (localIndex < MENU_OPTIONS.length)
		{
			System.out.printf("%-3s%-5s%-10s\n",MENU_CHARS[localIndex], "for", MENU_OPTIONS[localIndex]);
			localIndex++;
		}//REPETITION STRUCTURE FOR ARRAY LOOP END
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Enter your selection here: ");
	}//MAIN MENU DISPLAY END
	//MAIN MENU DISPLAY START
	public static void displayFileMenu()
	{
		int localIndex = 0;
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE MENU");
		//REPETITION STRUCTURE FOR ARRAY LOOP START
		while (localIndex < FILE_MENU_OPTIONS.length)
		{
			System.out.printf("%-3s%-5s%-10s\n",FILE_MENU_CHARS[localIndex], "for", FILE_MENU_OPTIONS[localIndex]);
			localIndex++;
		}//REPETITION STRUCTURE FOR ARRAY LOOP END
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Enter your selection here: ");
	}//MAIN MENU DISPLAY END
	//DISCOUNT MENU DISPLAY START
	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		int localIndex = 0;
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("DISCOUNT MENU");
		//REPTITION STRUCTURE FOR ARRAY LOOP START
		while(localIndex < borrowedDiscountNames.length)
		{
			System.out.printf("%-3s%-5s%-14s%10s%2s\n",SUB_MENU_CHARS[localIndex], "for", borrowedDiscountNames[localIndex], borrowedDiscountRates[localIndex]*100, "%");
			localIndex++;
		}//REPETITION STRUCTURE FOR ARRAY LOOP END
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Enter your selection here: ");
	}//DISCOUNT MENU DISPLAY END
	//RECORD REPORT DISPLAY START
	public static void displayRecordReport(int recordCount)
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("RECORD REPORT");
		System.out.printf("%-3d%-20s\n",recordCount,"records processed");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//RECORD REPORT DISPLAY END
	//OUT OF STOCK DISPLAY START
	public static void displayOutOfStock()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("OUT OF STOCK ERROR");
		System.out.println("The quantity entered is greater than the quantity in-stock");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//OUT OF STOCK DISPLAY END
	//FILE ERROR DISPLAY START
	public static void displayFileError()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE ERROR");
		System.out.println("The file named was not found or could not be opened");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//FILE ERROR DISPLAY END
	//DISPLAY NOT FOUND START
	public static void displayNotFound()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("NOT FOUND ERROR");
		System.out.println("The search value entered was not found");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//DISPLAY NOT FOUND END
	//DISPLAY LOGIN ERROR START
	public static void displayLoginError()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("LOGIN ERROR");
		System.out.println("Username and/or Password is incorrect");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//DISPLAY LOGIN ERROR END
	//DISPLAY ACCOUNT RESULTS START
	public static void displayAccountResults()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("New account created");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//DISPLAY ACCOUNT RESULTS END
	//DISPLAY OVERLOADED ACCOUNT RESULTS START
	public static void displayAccountResults(String userName)
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.printf("%-31s%-8s%-18s\n","Account not created: username,", userName,"already exists");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//DISPLAY OVERLOADED ACCOUNT RESULTS END
	//DISPLAY ORDER REPORT START
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCounts)
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~  ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~  ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.printf("%-23s%-20s\n","Customer Name:",borrowedUserName);
		System.out.println("");
		System.out.printf("%-23s%-10s\n","Item Name:",borrowedItemName);
		System.out.printf("%-23s%-2s%8.2f\n","Item Price:","$",borrowedItemPrice);
		System.out.println("");
		System.out.printf("%-23s%-2s%8d\n","Quantity:","",borrowedHowMany);
		System.out.println("");
		System.out.printf("%-23s%-2s%8.2f\n","Subtotal:","$",borrowedSubTotal);
		System.out.printf("%-23s%9s%3s\n","Tax Rate:",borrowedTaxRate*100,"%");
		System.out.printf("%-23s%-2s%8.2f\n","Tax Amount:","$",borrowedTaxAmt);
		System.out.println("");
		System.out.printf("%-23s%-2s%8.2f\n","Order Total:","$",borrowedTotalCost);
		System.out.println("");
		System.out.printf("%-23s%-10s\n","Prize:",borrowedPrizeName);
		System.out.println("");
		System.out.printf("%-23s%-2d%15s\n","Buy more now: Only",borrowedInStockCounts,"left in stock!");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~  ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}//DISPLAY ORDER REPORT END
	//DISPLAY ORDER REPORT OVERLOADED START
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, String borrowedDiscountName, double borrowedDiscountRate, double borrowedDiscountAmt, double borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCounts)
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~  ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~  ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.printf("%-23s%-20s\n","Customer Name:",borrowedUserName);
		System.out.println("");
		System.out.printf("%-23s%-10s\n","Item Name:",borrowedItemName);
		System.out.printf("%-23s%-2s%8.2f\n","Item Price:","$",borrowedItemPrice);
		System.out.println("");
		System.out.printf("%-23s%-10s\n","Discount Name:",borrowedDiscountName);
		System.out.printf("%-23s%9s%3s\n","Discount Rate:",borrowedDiscountRate*100,"%");
		System.out.printf("%-23s%-2s%8.2f\n","Discount Amount:","$",borrowedDiscountAmt);
		System.out.printf("%-23s%-2s%8.2f\n","Discount Price:","$",borrowedDiscountPrice);
		System.out.println("");
		System.out.printf("%-23s%-2s%8d\n","Quantity:","",borrowedHowMany);
		System.out.println("");
		System.out.printf("%-23s%-2s%8.2f\n","Subtotal:","$",borrowedSubTotal);
		System.out.printf("%-23s%9s%3s\n","Tax Rate:",borrowedTaxRate*100,"%");
		System.out.printf("%-23s%-2s%8.2f\n","Tax Amount:","$",borrowedTaxAmt);
		System.out.println("");
		System.out.printf("%-23s%-2s%8.2f\n","Order Total:","$",borrowedTotalCost);
		System.out.println("");
		System.out.printf("%-23s%-10s\n","Prize:",borrowedPrizeName);
		System.out.println("");
		System.out.printf("%-20s%-2d%15s\n","Buy more now: Only",borrowedInStockCounts,"left in stock!");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~  ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}//DISPLAY ORDER REPORT OVERLOADED END
	//DISPLAY FINAL REPORT START
	public static void displayFinalReport(int[] borrowedItemIDs, String[] borrowedItemName, double[] borrowedItemPrice, int[] borrowedOrderQuantities, double[] borrowedOrderTotals, double borrowedRecordCount, double borrowedGrandTotal)
	{
		int localIndex = 0;
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~  ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("FINAL REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~  ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.printf("%-5s%-20s%-10s%-8s%-8s\n","ID","NAME","PRICE","QTY","TOTAL");
		//RUN WHILE RECORD COUNT VALIDATION START
		while (localIndex < borrowedRecordCount && localIndex < borrowedItemIDs.length && localIndex < borrowedItemName.length && localIndex < borrowedItemPrice.length && localIndex < borrowedOrderQuantities.length && localIndex < borrowedOrderTotals.length)
		{
			System.out.printf("%-5d%-20s%-2s%-8.2f%-8d%-2s%-8.2f\n", borrowedItemIDs[localIndex], borrowedItemName[localIndex], "$", borrowedItemPrice[localIndex], borrowedOrderQuantities[localIndex], "$", borrowedOrderTotals[localIndex]);
			localIndex++;
		}//RUN WHILE RECORD COUNT VALIDATION END
		System.out.println("");
		System.out.println("GRAND TOTAL");
		System.out.printf("%-2s%-5.2f\n","$", borrowedGrandTotal);
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~  ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}//DISPLAY FINAL REPORT END

	//VRS
	//GET USERNAME START
	public static String getUserName(Scanner borrowedInput)
	{
		String localUserName = "";
		System.out.println("Enter your username: ");
		localUserName = borrowedInput.next();
		return localUserName;
	}//GET USERNAME END
	//GET PASSWORD START
	public static String getPassword(Scanner borrowedInput)
	{
		String localPassword = "";
		System.out.println("Enter your password: ");
		localPassword = borrowedInput.next();
		return localPassword;
	}//GET PASSWORD END
	//GET FILE NAME START
	public static String getFileName(Scanner borrowedInput)
	{
		String localFileName = "";
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Enter the file name with extension (i.e. file.txt): ");
		localFileName = borrowedInput.next();
		return localFileName;
	}//GET FILE NAME END
	//VALIDATE MAIN MENU SELECTION START
	public static char validateMenuSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';
		displayMainMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		//VALIDATION LOOP START
		while (localSelection != MENU_CHARS[0] && localSelection != MENU_CHARS[1] && localSelection != MENU_CHARS[2])
		{
			System.out.println("~~ERROR: Invalid selection.~~~");
			displayMainMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//VALIDATION LOOP END
		return localSelection;
	}//VALIDATE MAIN MENU SELECTION END
	//VALIDATE VALUE OF HOW MANY START
	public static String validateHowMany(Scanner borrowedInput)
	{
		String localHowMany = "";
		System.out.println("Please enter a quantity: ");
		localHowMany = borrowedInput.next();
		//VALIDATION LOOP START
		while (Integer.parseInt(localHowMany) <= 0)
		{
			System.out.println("~~ERROR: Invalid quantity.~~~");
			System.out.println("Please enter a quantity: ");
			localHowMany = borrowedInput.next();
		}//VALIDATION LOOP END
		return localHowMany;
	}//VALIDATE VALUE OF HOW MANY END
	//VALIDATE SEARCH VALUE START
	public static int validateSearchValue(Scanner borrowedInput)
	{
		int localSearchIndex = 0;
		System.out.println("Enter the search value: ");
		localSearchIndex = borrowedInput.nextInt();
		//VALIDATION LOOP START
		while (localSearchIndex < 0)
		{
			displayNotFound();
			System.out.println("Enter the search value: ");
			localSearchIndex = borrowedInput.nextInt();
		}//VALIDATION LOOP END
		return localSearchIndex;
	}//VALIDATE SEARCH VALUE END
	//VALIDATE SELECTION FROM DISCOUNT MENU START
	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		char localSelection = ' ';
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		//VALIDATION LOOP START
		while (localSelection != SUB_MENU_CHARS[0] && localSelection != SUB_MENU_CHARS[1] && localSelection != SUB_MENU_CHARS[2] && localSelection != SUB_MENU_CHARS[3])
		{
			System.out.println("~~ERROR: Invalid selection.~~~");
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//VALIDATION LOOP END
		return localSelection;
	}//VALIDATE SELECTION FROM DISCOUNT MENU END
	//VALIDATE SELECTION FROM FILE MENU START
	public static char validateFileSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';
		displayFileMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		//VALIDATION LOOP START
		while (localSelection != FILE_MENU_CHARS[0] && localSelection != FILE_MENU_CHARS[1] && localSelection != FILE_MENU_CHARS[2])
		{
			System.out.println("~~ERROR: Invalid selection.~~~");
			displayFileMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//VALIDATION LOOP END
		return localSelection;
	}//VALIDATE MAIN MENU SELECTION END
}//MAIN CLASS END
